// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProfileV2Test.FeatureFiles._6
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("To indicate Student is looking for job", Description="  In order I can see the status while working with resumes\r\n  As HR\r\n  I should h" +
        "ave possibility to indicate Student is looking for job", SourceFile="FeatureFiles\\_6\\6.10 To indicate Student is looking for job.feature", SourceLine=6)]
    public partial class ToIndicateStudentIsLookingForJobFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "6.10 To indicate Student is looking for job.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "To indicate Student is looking for job", "  In order I can see the status while working with resumes\r\n  As HR\r\n  I should h" +
                    "ave possibility to indicate Student is looking for job", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 12
#line 13
testRunner.Given("As unauthorised user I come to landing page of Profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
testRunner.And("I log in as HR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
testRunner.And("I stay on home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HR Checks possibility to choose option in column \"Looking for job\"", SourceLine=16)]
        public virtual void HRChecksPossibilityToChooseOptionInColumnLookingForJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HR Checks possibility to choose option in column \"Looking for job\"", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 12
this.FeatureBackground();
#line 18
 testRunner.Then("I can choose option in column \"Looking for job\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HR Checks default data in \"Looking for job\" table cells", SourceLine=19)]
        public virtual void HRChecksDefaultDataInLookingForJobTableCells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HR Checks default data in \"Looking for job\" table cells", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 12
this.FeatureBackground();
#line 21
 testRunner.When("I see table column \"Looking for job\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("I can see slider button is inactive by default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("I can make it active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HR Chooses option in table column \"Looking for a job\"", SourceLine=24)]
        public virtual void HRChoosesOptionInTableColumnLookingForAJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HR Chooses option in table column \"Looking for a job\"", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 12
this.FeatureBackground();
#line 26
 testRunner.When("I see table column \"Looking for a job\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("I can change option of slider button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void HRChoosesSliderButtonOptionMeaningInTableColumnLookingForAJob(string option, string state, string meaning, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HR chooses Slider button option meaning in table column \"Looking for a job\"", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 12
this.FeatureBackground();
#line 30
 testRunner.When(string.Format("slider button in table column \"Looking for a job\" is \"{0}\"", state), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then(string.Format("option meaning is \"{0}\"", meaning), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HR chooses Slider button option meaning in table column \"Looking for a job\", opti" +
            "on1", SourceLine=33)]
        public virtual void HRChoosesSliderButtonOptionMeaningInTableColumnLookingForAJob_Option1()
        {
#line 29
this.HRChoosesSliderButtonOptionMeaningInTableColumnLookingForAJob("option1", "active", "Student is looking for job", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HR chooses Slider button option meaning in table column \"Looking for a job\", opti" +
            "on2", SourceLine=33)]
        public virtual void HRChoosesSliderButtonOptionMeaningInTableColumnLookingForAJob_Option2()
        {
#line 29
this.HRChoosesSliderButtonOptionMeaningInTableColumnLookingForAJob("option2", "inactive", "Student is not looking for job", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
